----------------------------- MODULE countdown -----------------------------
(*This is an extremely basic spec simply to show what a spec can look like
in pure TLA+ rather than pluscal; in fact except for comments it is generated
by the following pluscal code:

variables
  x = Start;
begin
  while x > 0 do
    x := x - 1;
  end while;
end algorithm

*)

\* Must include ('extend') Naturals to get order operators like < > etc.
EXTENDS Naturals

\* Meant to be externally defined
CONSTANTS Start

VARIABLES x, pc

vars == << x, pc >>

\* The Lbl_1 marker was automatically generated by pluscal to denote the first
\* step in the program.  The Init state represents initialization (obviously)
\* and the beginning of the program at the program counter (pc).
Init == (* Global variables *)
        /\ x = Start
        /\ pc = "Counting"

\* This if-else could probably be written as a different set of bullets
Counting == /\ pc = "Counting"
           /\ IF x > 0
               THEN /\ x' = x - 1
                    /\ pc' = "Counting"
               ELSE /\ pc' = "Done"
                    /\ x' = x

(* Allow infinite stuttering to prevent deadlock on termination. *)

\* If the program counter is set to Done and the variables are unchanged
\* we are terminating.  This is a 'stuttering' step because the variables
\* are unchanged, as is the PC, so we are in the 'finishing' state but
\* nothing is happening
Terminating == pc = "Done" /\ UNCHANGED vars

\* The program can either be counting or terminating; maybe a not-too-bad
\* way of labeling program states is '..ing'
Next == \/ Counting
       \/ Terminating

\* The full spec then is the initial condition combined with all the state
\* transitions.  The [] means that [Next]_vars is true for all states
\* (but what does [Next]_vars mean here?)
\* From https://lamport.azurewebsites.net/tla/proving-safety.pdf
\* '(Remember that [Next]_vars equals
\* Next \/ (vars'=vars), so it's true on a step <s,t> if and only if
\* Next is true on <s,t> or the expression vars has the same value
\* in state s and state t
\* From http://hillelwayne.com/post/fairness, '<<A>>_v' means 'A happens and
\* the value of v changes', so we are saying... always next happens and the
\* value of 'vars' changes?
Spec == /\ Init
       /\ [][Next]_vars
       /\ WF_vars(Next)

\* The <> means 'Eventually', so we are declaring as a liveness condition that
\* the program eventually terminates
Termination == <>(pc = "Done")

=============================================================================
\* Modification History
\* Created Mon Jun 21 09:12:12 CDT 2021 by vputz
